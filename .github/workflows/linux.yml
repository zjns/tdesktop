name: Linux

on:
  workflow_dispatch:
    inputs:
      build_type:
        type: choice
        description: Build type
        default: Debug
        required: true
        options:
          - Release
          - Debug
      upload:
        type: boolean
        description: Upload app?
        required: true
        default: 'false'
      up_to_tg:
        type: boolean
        description: Send to Telegram?
        required: true
        default: 'false'
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-linux.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/linux.yml'
      - 'snap/**'
      - 'Telegram/build/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.bat'
      - 'Telegram/Telegram.plist'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-linux.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/linux.yml'
      - 'snap/**'
      - 'Telegram/build/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.bat'
      - 'Telegram/Telegram.plist'

jobs:
  linux:
    name: CentOS 7
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    container:
      image: docker.pkg.github.com/telegramdesktop/tdesktop/centos_env
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    defaults:
      run:
        shell: scl enable llvm-toolset-7.0 -- scl enable devtoolset-10 -- bash --noprofile --norc -eo pipefail {0}

    strategy:
      matrix:
        defines:
          - ''

    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      UPLOAD_ARTIFACT: ${{ github.event.inputs.upload }}
      SEND_TO_TG: ${{ github.event.inputs.up_to_tg }}

    steps:
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Setup python
        uses: actions/setup-python@v2.3.1
        if: env.SEND_TO_TG == 'true'
        with:
          python-version: '3.9.x'
      - name: Prepare python packages
        if: env.SEND_TO_TG == 'true'
        run: |
          pip install -U wheel
          pip install -U pyrogram tgcrypto

      - name: Clone
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up
        run: |
          gcc --version
          ln -s $LibrariesPath Libraries

      - name: Get app version
        run: |
          echo "APP_VER_NAME=`awk '$1 == "AppVersionStr" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV
          echo "APP_VER_CODE=`awk '$1 == "AppVersion" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV
          echo "APP_BETA=`awk '$1 == "BetaChannel" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV

      - name: Telegram Desktop build
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        run: |
          cd $REPO_NAME/Telegram

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo Define from matrix: $DEFINE
            echo "ARTIFACT_NAME=Telegram_${{ matrix.defines }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=Telegram" >> $GITHUB_ENV
          fi

          ./configure.sh \
          -D CMAKE_C_FLAGS="-Werror" \
          -D CMAKE_CXX_FLAGS="-Werror" \
          -D CMAKE_EXE_LINKER_FLAGS="-s" \
          -D TDESKTOP_API_TEST=OFF \
          -D TDESKTOP_API_ID=$API_ID \
          -D TDESKTOP_API_HASH=$API_HASH \
          -D DESKTOP_APP_USE_PACKAGED=OFF \
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF \
          $DEFINE

          cmake --build ../out --config $BUILD_TYPE --parallel

      - name: Check
        run: |
          filePath="$REPO_NAME/out/$BUILD_TYPE/Telegram"
          if test -f "$filePath"; then
            echo "Build successfully done! :)"

            size=$(stat -c %s "$filePath")
            echo "File size of ${filePath}: ${size} Bytes."
          else
            echo "Build error, output file does not exist."
            exit 1
          fi

      - name: Move artifact
        run: |
          cd $REPO_NAME/out/$BUILD_TYPE
          mkdir artifact
          mv Telegram artifact/

      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/${{ env.BUILD_TYPE }}/artifact/

      - name: Send to Telegram
        if: env.SEND_TO_TG == 'true'
        shell: python
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
        run: |
          import asyncio
          import os
          from pyrogram import Client
          async def main():
            bot = Client(
              ":memory:",
              api_id=os.environ["API_ID"],
              api_hash=os.environ["API_HASH"],
              bot_token=os.environ["BOT_TOKEN"],
            )
            async with bot:
              ver_name = os.environ["APP_VER_NAME"]
              ver_code = os.environ["APP_VER_CODE"]
              build_type = os.environ["BUILD_TYPE"]
              channel_id = int(os.environ["CHANNEL_ID"])
              beta = True if (os.environ["APP_BETA"] == "1") else False
              caption = f"{ver_name} ({ver_code})\nBuild type: `{build_type}`\n#Telegram #Linux"
              caption = f"{caption} #Beta" if (beta) else caption
              document = f"{os.environ['REPO_NAME']}/out/{os.environ['BUILD_TYPE']}/artifact/Telegram"
              await bot.send_document(
                chat_id=channel_id,
                document=document,
                caption=caption,
                parse_mode="markdown",
              )
          async def wait():
            try:
              await asyncio.wait_for(main(), timeout=600)
            except asyncio.TimeoutError:
              print("message send timeout!!!")
              exit(1)
          asyncio.run(wait())
