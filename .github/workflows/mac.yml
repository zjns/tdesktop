name: MacOS

on:
  schedule:
    # UTC+8 at AM 02:45 on every 5th day-of-month
    # to make the cache available always (7d)
    - cron: '45 18 */5 * *'
  workflow_dispatch:
    inputs:
      arch:
        type: choice
        description: Arch
        default: x86_64
        required: true
        options:
          - arm64
          - x86_64
          - x86_64 arm64
      build_type:
        type: choice
        description: Build type
        default: Debug
        required: true
        options:
          - MinSizeRel
          - Release
          - Debug
      only_cache:
        type: boolean
        description: Only build cache?
        required: true
        default: false
      upload:
        type: boolean
        description: Upload app?
        required: true
        default: false
      up_to_tg:
        type: boolean
        description: Send to Telegram?
        required: true
        default: false
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/mac.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/configure.bat'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/mac.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/configure.bat'

jobs:

  macos:
    name: MacOS
    runs-on: macos-12
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(join(github.event.commits.*.message), 'Version') || contains(join(github.event.commits.*.message), 'version')

    strategy:
      matrix:
        defines:
          - ''
    env:
      ARCH: ${{ github.event.inputs.arch }}
      UPLOAD_ARTIFACT: ${{ github.event.inputs.upload }}
      SEND_TO_TG: ${{ github.event.inputs.up_to_tg }}
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      ONLY_CACHE: ${{ github.event.inputs.only_cache == 'true' || github.event_name == 'schedule' }}
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"

    steps:
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Check event
        run: |
          flag="${{ contains(join(github.event.commits.*.message), 'Version') || contains(join(github.event.commits.*.message), 'version') }}"
          if [ "$flag" = "true" ]; then
            echo "Found new version, build release now."
            echo "ARCH=x86_64 arm64" >> $GITHUB_ENV
            echo "UPLOAD_ARTIFACT=false" >> $GITHUB_ENV
            echo "SEND_TO_TG=true" >> $GITHUB_ENV
            echo "BUILD_TYPE=MinSizeRel" >> $GITHUB_ENV
            echo "ONLY_CACHE=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        if: env.SEND_TO_TG == 'true'
        with:
          python-version: '3.9.x'

      - name: Prepare Python packages
        if: env.SEND_TO_TG == 'true'
        run: |
          pip install -U wheel
          pip install -U pyrogram tgcrypto

      - name: Clone
        uses: actions/checkout@v3.1.0
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: Get app version
        run: |
          echo "APP_VER_NAME=`awk '$1 == "AppVersionStr" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV
          echo "APP_VER_CODE=`awk '$1 == "AppVersion" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV
          echo "APP_BETA=`awk '$1 == "BetaChannel" {print $2}' ./$REPO_NAME/Telegram/build/version`" >> $GITHUB_ENV

      - name: First set up
        run: |
          sudo chown -R `whoami`:admin /usr/local/share
          brew install automake coreutils

          # Disable spotlight.
          sudo mdutil -a -i off

          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: ThirdParty cache
        id: cache-third-party
        uses: actions/cache@v3.0.11
        with:
          path: ThirdParty
          key: ${{ runner.OS }}-third-party-${{ hashFiles(format('{0}/{1}', env.REPO_NAME, env.PREPARE_PATH)) }}
          restore-keys: ${{ runner.OS }}-third-party-

      - name: Libraries cache
        id: cache-libs
        uses: actions/cache@v3.0.11
        with:
          path: Libraries
          key: ${{ runner.OS }}-libs-${{ hashFiles(format('{0}/{1}', env.REPO_NAME, env.PREPARE_PATH)) }}
          restore-keys: ${{ runner.OS }}-libs-

      - name: Libraries
        run: |
          ./$REPO_NAME/Telegram/build/prepare/mac.sh silent

      - name: Free up some disk space
        run: |
          cd Libraries
          find . -iname "*.dir" -exec rm -rf {} || true \;

      - name: Telegram Desktop build
        if: env.ONLY_CACHE == 'false'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        run: |
          cd $REPO_NAME/Telegram

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo Define from matrix: $DEFINE
            echo "ARTIFACT_NAME=Telegram_${{ matrix.defines }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=Telegram" >> $GITHUB_ENV
          fi

          ./configure.sh \
          -D CMAKE_C_FLAGS="-Werror" \
          -D CMAKE_CXX_FLAGS="-Werror" \
          -D TDESKTOP_API_TEST=OFF \
          -D TDESKTOP_API_ID=$API_ID \
          -D TDESKTOP_API_HASH=$API_HASH \
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF \
          $DEFINE

          cd ../out

          xcoderun="xcodebuild build -project Telegram.xcodeproj -scheme Telegram -destination 'platform=macOS' ARCHS=\"$ARCH\" ONLY_ACTIVE_ARCH=NO -configuration $BUILD_TYPE CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO"
          bash -c "$xcoderun" || bash -c "$xcoderun" || bash -c "$xcoderun"
          if [ "$BUILD_TYPE" != "Debug" ]; then
            xcoderun="xcodebuild archive -project Telegram.xcodeproj -scheme Telegram -destination 'platform=macOS' ARCHS=\"$ARCH\" ONLY_ACTIVE_ARCH=NO -configuration $BUILD_TYPE"
            bash -c "$xcoderun" || bash -c "$xcoderun" || bash -c "$xcoderun"
          fi

      - name: Move artifact
        if: env.ONLY_CACHE == 'false'
        run: |
          cd $REPO_NAME/out/$BUILD_TYPE
          mkdir artifact
          [ "$BUILD_TYPE" = "Debug" ] && app="Telegram.app" || app="`grealpath Telegram.app`"
          [ "$BUILD_TYPE" = "Debug" ] && updater="Updater" || updater="`grealpath Updater`"
          mv "$app" "$updater" artifact/
          cd artifact
          zip -r Telegram.zip Telegram.app

      - uses: actions/upload-artifact@master
        if: env.ONLY_CACHE == 'false' && env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/$BUILD_TYPE/artifact/

      - name: Send to Telegram
        if: env.ONLY_CACHE == 'false' && env.SEND_TO_TG == 'true'
        shell: python
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
        run: |
          import asyncio
          import os
          from pyrogram import Client
          async def main():
            bot = Client(
              "client",
              in_memory=True,
              api_id=os.environ["API_ID"],
              api_hash=os.environ["API_HASH"],
              bot_token=os.environ["BOT_TOKEN"],
            )
            async with bot:
              arch = os.environ["ARCH"]
              ver_name = os.environ["APP_VER_NAME"]
              ver_code = os.environ["APP_VER_CODE"]
              build_type = os.environ["BUILD_TYPE"]
              channel_id = int(os.environ["CHANNEL_ID"])
              beta = True if (os.environ["APP_BETA"] == "1") else False
              caption = f"{ver_name} ({ver_code})\nArch: `{arch}`\nBuild type: `{build_type}`\n#Telegram #macOS"
              caption = f"{caption} #Beta" if (beta) else caption
              document = f"{os.environ['REPO_NAME']}/out/{os.environ['BUILD_TYPE']}/artifact/Telegram.zip"
              await bot.send_document(
                chat_id=channel_id,
                document=document,
                caption=caption,
              )
          async def wait():
            try:
              await asyncio.wait_for(main(), timeout=600)
            except asyncio.TimeoutError:
              print("message send timeout!!!")
              exit(1)
          asyncio.run(wait())
